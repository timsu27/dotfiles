---
description:
globs:
alwaysApply: false
---
# Testing Essentials

Core testing principles for reliable software development.

## Testing Pyramid

### Unit Tests (70%)
```python
def test_calculate_discount():
    assert calculate_discount(100, 0.1) == 10
    assert calculate_discount(0, 0.1) == 0

def test_invalid_input_raises_error():
    with pytest.raises(ValueError):
        calculate_discount(-100, 0.1)
```

### Integration Tests (20%)
```python
def test_user_registration():
    response = client.post("/users", json={"email": "test@example.com"})
    assert response.status_code == 201
    assert User.query.filter_by(email="test@example.com").first()
```

### End-to-End Tests (10%)
- Complete user workflows
- Critical business paths
- Browser automation for UI

## Test-Driven Development

### Red-Green-Refactor
1. **Red**: Write failing test first
2. **Green**: Write minimal code to pass
3. **Refactor**: Improve while keeping tests green

### Benefits
- **Better design**: Tests drive API design
- **Regression protection**: Prevent breaking changes
- **Living documentation**: Tests describe behavior

## Test Quality

### Good Tests (AAA Pattern)
```python
def test_user_login():
    # Arrange
    user = create_user(email="test@example.com")

    # Act
    result = login(user.email, "password")

    # Assert
    assert result.success is True
```

### Test Characteristics
- **Fast**: Quick execution (<1ms per unit test)
- **Independent**: Don't depend on other tests
- **Repeatable**: Same result every time
- **Self-validating**: Clear pass/fail
- **Timely**: Written with production code

## Testing Strategies

### Mocking
```python
@patch('external_api.get_weather')
def test_weather_service(mock_api):
    mock_api.return_value = {"temp": 25}
    result = get_forecast("NYC")
    assert result["temperature"] == 25
```

### Test Data
- **Fixtures**: Reusable test setup
- **Factories**: Generate varied test objects
- **Clean database**: Reset between tests

## Test Coverage

### Focus Areas
- **Business logic**: Core algorithms
- **Edge cases**: Boundary conditions
- **Error conditions**: Invalid inputs
- **Integration points**: APIs, databases

### Coverage Guidelines
- **Aim for 80-90%** on business logic
- **Don't test framework code** or third-party libraries
- **Focus on critical paths** over percentage

## Test Organization

### Structure
tests/
├── unit/ # Fast, isolated tests
├── integration/ # Component interaction
├── e2e/ # End-to-end scenarios
└── fixtures/ # Shared test data
### Naming
- **Descriptive**: `test_user_cannot_login_with_invalid_password`
- **Behavior focused**: What is being verified
- **Consistent format**: `test_[unit]_[scenario]_[expected]`

## Best Practices

### Test Maintenance
- **Keep simple**: One assertion per test when possible
- **Refactor tests**: Same quality as production code
- **Remove obsolete**: Delete tests for removed features
- **Update with changes**: Keep synchronized

### Performance Testing
- **Load testing**: Gradual increase in load
- **Resource monitoring**: Memory leaks, CPU usage
- **Realistic data**: Production-like patterns

### Error Testing
```python
def test_handles_database_error():
    with patch('db.execute', side_effect=DatabaseError()):
        with pytest.raises(ServiceError):
            create_user("test@example.com")
```

Write tests that fail for the right reasons and pass when the system works correctly.
