---
description:
globs:
alwaysApply: false
---
# Documentation Essentials

Core documentation practices for maintainable code and projects.

## Code Documentation

### Function Documentation
```python
def calculate_discount(price: float, rate: float) -> float:
    """Calculate discount amount.

    Args:
        price: Original price in dollars
        rate: Discount rate as decimal (0.1 = 10%)

    Returns:
        Discount amount in dollars
    """
    return price * rate
```

### Smart Comments
```python
# WHY: Cache prevents expensive API calls
cache_key = f"user:{user_id}:profile"

# Business rule: Premium users get extended quota
if user.tier == 'premium' and user.usage < limit:
    effective_limit = limit * 1.5
```

### Comment Guidelines
- **Explain WHY, not WHAT**: Code should be self-documenting
- **Business context**: Why this logic exists
- **Non-obvious decisions**: Alternative approaches considered
- **Temporary fixes**: TODO items with context

## API Documentation

### Essential Elements
```yaml
/users/{id}:
  get:
    summary: Get user by ID
    responses:
      200:
        description: User details
      404:
        description: User not found
```

### Required Sections
- **Endpoint descriptions**: What each endpoint does
- **Request examples**: Sample requests with parameters
- **Response examples**: Success and error responses
- **Authentication**: How to authenticate
- **Rate limits**: Usage restrictions

## Project Documentation

### README Structure
```markdown
# Project Name
Brief description of purpose.

## Quick Start
npm install && npm start

## API Endpoints
- GET /users - List users
- POST /users - Create user

## Environment Variables
- DATABASE_URL - Database connection
- SECRET_KEY - JWT signing key
```

### Essential Sections
- **Purpose**: What problem this solves
- **Quick start**: Get running in <5 minutes
- **Key endpoints**: Main functionality
- **Configuration**: Required environment setup

## Change Documentation

### Commit Messages
```bash
feat(auth): add JWT refresh endpoint
fix(api): handle empty user response
docs(readme): update setup instructions

# Format: type(scope): description
```

### Changelog Format
```markdown
## [2.1.0] - 2024-01-15

### Added
- JWT token refresh endpoint

### Fixed
- Empty response handling in user API

### Changed
- Rate limiting increased to 150/hour
```

## Documentation Standards

### Writing Guidelines
- **Be concise**: Remove unnecessary words
- **Use examples**: Show, don't just tell
- **Stay current**: Update with code changes
- **Test examples**: Ensure code samples work

### Maintenance
- **Review quarterly**: Check for outdated content
- **Update with PRs**: Documentation as part of code changes
- **Remove obsolete**: Delete outdated information
- **Validate links**: Check external references

## Documentation Checklist

**For New Features**
- [ ] Function/class docstrings added
- [ ] API documentation updated
- [ ] README updated if public API changes
- [ ] Examples provided for complex features

**For Releases**
- [ ] Changelog entry added
- [ ] Version numbers updated
- [ ] Migration guides provided
- [ ] Breaking changes documented

Good documentation saves more time than it takes to write.