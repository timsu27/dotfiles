---
description:
globs:
alwaysApply: false
---
# Documentation Principles

Essential documentation practices for maintainable and accessible code.

## Code Documentation

### Function Documentation
```python
def calculate_discount(price: float, discount_rate: float) -> float:
    """Calculate discount amount for a given price.

    Args:
        price: Original price in dollars
        discount_rate: Discount percentage as decimal (0.1 = 10%)

    Returns:
        Discount amount in dollars

    Raises:
        ValueError: If price is negative or discount_rate > 1
    """
    if price < 0 or discount_rate > 1:
        raise ValueError("Invalid input parameters")
    return price * discount_rate
```

### Inline Comments
```python
# WHY: Use cache to avoid expensive API calls
cache_key = f"user:{user_id}:profile"

# Complex business logic - explain the reasoning
if user.subscription_tier == 'premium' and user.usage < monthly_limit:
    # Premium users get extended quota during promotional period
    effective_limit = monthly_limit * 1.5
```

### Comment Guidelines
- **Explain WHY, not WHAT**: Code should be self-explanatory
- **Business context**: Why this logic exists
- **Non-obvious decisions**: Alternative approaches considered
- **Temporary fixes**: TODO items with context

## API Documentation

### OpenAPI/Swagger
```yaml
/users/{id}:
  get:
    summary: Get user by ID
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: User not found
```

### Essential API Docs
- **Clear endpoint descriptions**: What the endpoint does
- **Request examples**: Sample requests with all parameters
- **Response examples**: Success and error responses
- **Authentication**: How to authenticate requests
- **Rate limits**: Usage restrictions and quotas

## README Structure

### Essential Sections
```markdown
# Project Name
Brief description of what the project does.

## Quick Start
```bash
pip install -r requirements.txt
python app.py
```

## API Endpoints
- `GET /users` - List all users
- `POST /users` - Create new user

## Configuration
Set these environment variables:
- `DATABASE_URL` - Database connection string
- `SECRET_KEY` - JWT signing key

## Development
```bash
# Run tests
pytest

# Start development server
uvicorn main:app --reload
```
```

### README Best Practices
- **Start with purpose**: What problem does this solve?
- **Quick start**: Get running in <5 minutes
- **Examples**: Show common use cases
- **Environment setup**: Required dependencies and configuration

## Database Documentation

### Schema Documentation
```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,  -- User's login email
    created_at TIMESTAMP DEFAULT NOW(),  -- Account creation time
    subscription_tier VARCHAR(50)        -- premium, basic, trial
);

-- Indexes for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_created_at ON users(created_at);
```

### Migration Documentation
```python
"""Add user subscription tiers

Revision ID: abc123
Revises: def456
Create Date: 2024-01-15 10:30:00

Business Context:
- Support new premium subscription model
- Migrate existing users to 'basic' tier
- Enable feature flags based on subscription
"""
```

## Change Documentation

### Commit Messages
```bash
# Good commit messages
feat(auth): add JWT token refresh endpoint
fix(api): handle empty response in user lookup
docs(readme): update installation instructions

# Format: type(scope): description
# Types: feat, fix, docs, style, refactor, test, chore
```

### Changelog Format
```markdown
## [2.1.0] - 2024-01-15

### Added
- JWT token refresh endpoint for extended sessions
- User subscription tier management

### Fixed
- Empty response handling in user lookup API
- Memory leak in background job processor

### Changed
- Updated rate limiting from 100 to 150 requests/hour
```

## Documentation Maintenance

### Keep It Current
- **Update with code changes**: Documentation as part of PR process
- **Review regularly**: Quarterly documentation audits
- **Remove outdated content**: Delete obsolete information
- **Link validation**: Check external links periodically

### Writing Guidelines
- **Be concise**: Remove unnecessary words
- **Use examples**: Show, don't just tell
- **Consistent terminology**: Use same terms throughout
- **Active voice**: "The API returns data" vs "Data is returned"

## Documentation Tools

### Essential Stack
- **Code comments**: Inline documentation
- **README.md**: Project overview and setup
- **API docs**: OpenAPI/Swagger for REST APIs
- **Changelog**: Track changes over time
- **Architecture docs**: High-level system design

### Automation
```yaml
# Auto-generate API docs from code
swagger: "3.0"
info:
  title: User API
  version: "1.0"
paths:
  # Generated from FastAPI decorators
```

### Quality Checks
- **Spell check**: Use automated tools
- **Link validation**: Verify external references
- **Code examples**: Test that examples actually work
- **Consistency**: Use linting tools for markdown

## Documentation Checklist

**For New Features**
- [ ] Updated README if public API changes
- [ ] Function/class docstrings added
- [ ] API documentation updated
- [ ] Examples provided for complex features

**For Bug Fixes**
- [ ] Comments explain any non-obvious fixes
- [ ] Changelog entry added
- [ ] Related documentation updated

**Regular Maintenance**
- [ ] Quarterly documentation review
- [ ] Remove outdated content
- [ ] Update examples with current syntax
- [ ] Validate external links

Good documentation saves more time than it takes to write.
```

This documentation rule provides:
1. **Practical examples** for different types of documentation
2. **Clear guidelines** on what to document and when
3. **Structured approaches** for README, API docs, and code comments
4. **Maintenance practices** to keep documentation current
5. **Quality standards** for consistent, useful documentation
6. **Actionable checklists** for systematic documentation practices

The rule is concise while covering all essential documentation needs for software projects.