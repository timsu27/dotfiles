---
description:
globs:
alwaysApply: false
---
# API Design Essentials

Core principles for designing clean, intuitive APIs.

## RESTful Design

### HTTP Methods
- **GET**: Retrieve data (idempotent, cacheable)
- **POST**: Create resources
- **PUT**: Update/replace entire resource
- **PATCH**: Partial updates
- **DELETE**: Remove resources

### Resource Naming
GET /users # List users
GET /users/123 # Get specific user
POST /users # Create user
PUT /users/123 # Update user
DELETE /users/123 # Delete user

### Nested resources
GET /users/123/posts # User's posts
### URL Best Practices
- **Nouns, not verbs**: `/users` not `/getUsers`
- **Plural nouns**: `/users/123` not `/user/123`
- **Lowercase with hyphens**: `/user-profiles`
- **Query parameters**: `/users?limit=20&sort=name`

## HTTP Status Codes

### Success (2xx)
- **200 OK**: Successful GET, PUT, PATCH
- **201 Created**: Successful POST
- **204 No Content**: Successful DELETE

### Client Errors (4xx)
- **400 Bad Request**: Invalid request data
- **401 Unauthorized**: Authentication required
- **403 Forbidden**: Insufficient permissions
- **404 Not Found**: Resource doesn't exist
- **422 Unprocessable**: Validation errors

### Server Errors (5xx)
- **500 Internal Error**: Generic server error
- **503 Service Unavailable**: Temporary issues

## Request/Response Format

### Consistent JSON Structure
```json
// Success response
{
  "data": {
    "id": 123,
    "name": "John Doe",
    "email": "john@example.com"
  }
}

// Error response
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid email format",
    "field": "email"
  }
}
```

### Pagination
```json
{
  "data": [...],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "has_next": true
  }
}
```

## API Security

### Authentication
```http
Authorization: Bearer <jwt-token>
Authorization: Basic <base64-credentials>
```

### Security Headers
```http
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
Strict-Transport-Security: max-age=31536000
```

### Input Validation
- **Validate all inputs**: Never trust client data
- **Rate limiting**: Protect against abuse
- **HTTPS only**: Encrypt all communications
- **Sanitize data**: Prevent injection attacks

## Error Handling

### Error Response Format
```json
{
  "error": {
    "type": "validation_error",
    "message": "Validation failed",
    "code": "INVALID_INPUT",
    "details": [
      {
        "field": "email",
        "message": "Invalid email format"
      }
    ]
  }
}
```

### Error Guidelines
- **Clear messages**: Human-readable descriptions
- **Error codes**: Machine-readable identifiers
- **Field-specific**: Indicate which fields failed
- **Consistent format**: Same structure across endpoints

## Performance & Caching

### Caching Headers
```http
Cache-Control: public, max-age=3600
ETag: "abc123"
Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT
```

### Optimization
- **Field selection**: `/users?fields=id,name,email`
- **Include related data**: `/users?include=profile`
- **Compression**: gzip, deflate
- **Pagination**: Limit response size

## API Versioning

### URL Versioning
/api/v1/users
/api/v2/users

### Header Versioning
```http
Accept: application/vnd.api+json;version=1
API-Version: v2
```

## Best Practices

### Design Principles
- **Consistency**: Same patterns across endpoints
- **Predictability**: Intuitive URL structure
- **Stateless**: Each request self-contained
- **Idempotent**: Safe to retry operations

### Documentation
- **Clear descriptions**: What each endpoint does
- **Request examples**: All parameters shown
- **Response examples**: Success and error cases
- **Authentication**: How to authenticate requests

Design APIs that are intuitive for developers and maintainable over time.
