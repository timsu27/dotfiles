---
description:
globs: **/*.sql
alwaysApply: false
---
---
description: PostgreSQL-specific patterns and advanced features. Extends database fundamentals with PostgreSQL-specific best practices.
globs: **/*.sql
alwaysApply: false
---

# PostgreSQL Best Practices

*This rule extends [fundamentals.mdc](mdc:.cursor/rules/database/fundamentals.mdc) with PostgreSQL-specific patterns.*

## PostgreSQL-Specific Conventions

### Code Style
- **Lowercase SQL keywords**: Use lowercase for SQL reserved words (PostgreSQL convention)
- **Descriptive identifiers**: Tables, columns, and objects should be descriptive and unique
- **Whitespace formatting**: Use proper indentation for readability
- **ISO 8601 dates**: Store dates in `yyyy-mm-ddThh:mm:ss.sssss` format
- **Comments**: Use `/* ... */` for blocks, `--` for line comments

### PostgreSQL Naming Standards
- **Character limit**: Names must be under 63 characters (PostgreSQL limit)
- **snake_case**: Use for tables and columns (PostgreSQL convention)
- **Table names**: Prefer plurals (`users`, `orders`) in PostgreSQL
- **Column names**: Use singular forms (`user_id`, `email`)

## PostgreSQL Table Design

### Identity Columns (PostgreSQL 10+)
- **Prefer IDENTITY**: Use `GENERATED ALWAYS AS IDENTITY` for primary keys
- **Schema specification**: Explicitly reference `public` schema in queries
- **Table documentation**: Add comments to all tables (up to 1024 characters)
- **Avoid prefixes**: Don't use `tbl_` or similar prefixes

## Columns

- Use singular names and avoid generic names like 'id'.
- For references to foreign tables, use the singular of the table name with the `_id` suffix. For example `user_id` to reference the `users` table
- Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.

### PostgreSQL Table Example
```sql
-- PostgreSQL-specific syntax
CREATE TABLE books (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  author_id BIGINT REFERENCES authors (id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

COMMENT ON TABLE books IS 'Library book catalog with author relationships';
```

## PostgreSQL Query Patterns

- When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability
- Add spaces for readability.

Smaller queries:


```sql
select *
from employees
where end_date is null;

update employees
set end_date = '2023-12-31'
where employee_id = 1001;
```

Larger queries:

```sql
select
  first_name,
  last_name
from
  employees
where
  start_date between '2021-01-01' and '2021-12-31'
and
  status = 'employed';
```


### Joins and Subqueries
- Format joins and subqueries for clarity, aligning them with related SQL clauses.
- Prefer full table names when referencing tables. This helps for readability.

```sql
select
  employees.employee_name,
  departments.department_name
from
  employees
join
  departments on employees.department_id = departments.department_id
where
  employees.start_date > '2022-01-01';
```

## Aliases

- Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity.

```sql
select count(*) as total_employees
from employees
where end_date is null;
```


## Complex queries and CTEs

- If a query is extremely complex, prefer a CTE.
- Make sure the CTE is clear and linear. Prefer readability over performance.
- Add comments to each block.

```sql
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```
