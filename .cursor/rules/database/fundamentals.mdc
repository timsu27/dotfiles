---
description:
globs:
alwaysApply: false
---
# Database Fundamentals

Universal principles for database design, optimization, and security across all database systems.

*These fundamentals use ANSI SQL examples. See database-specific rules ([postgresql.mdc](mdc:.cursor/rules/database/postgresql.mdc), [mysql.mdc](mdc:.cursor/rules/database/mysql.mdc), [supabase.mdc](mdc:.cursor/rules/database/supabase.mdc)) for platform-specific syntax and features.*

## Schema Design Principles

### Normalization Essentials
```sql
-- 1NF: Atomic values, unique rows
users: id=1, name="John", email="john@example.com"
phones: user_id=1, phone="123-456-7890"

-- 2NF: Remove partial dependencies
orders: id, user_id, total, created_at
order_items: order_id, product_id, quantity

-- 3NF: Remove transitive dependencies
users: id, name, email
addresses: id, user_id, street, city, state
```

### Table Structure
```sql
-- Primary keys and relationships
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  status VARCHAR(20) CHECK (status IN ('pending', 'paid', 'shipped')),
  total DECIMAL(10,2) CHECK (total >= 0)
);
```

### Data Types and Constraints
- **Appropriate types**: Use specific types (INTEGER vs BIGINT, VARCHAR vs TEXT)
- **Constraints**: NOT NULL, CHECK, UNIQUE, FOREIGN KEY for data integrity
- **Indexes**: Always on foreign keys and frequently queried columns
- **Defaults**: Provide sensible default values
- **Database-specific**: Adapt data types to your database (see specific rules)

## Query Optimization

### Indexing Strategy
```sql
-- Single column indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_orders_user_id ON orders(user_id);

-- Composite indexes (most selective first)
CREATE INDEX idx_orders_user_status ON orders(user_id, status);

-- Covering indexes
CREATE INDEX idx_users_lookup ON users(email) INCLUDE (name, created_at);
```

### Query Best Practices
```sql
-- Good: Specific columns, indexed WHERE clauses
SELECT id, name, email FROM users WHERE active = true;

-- Good: Parameterized queries
SELECT * FROM users WHERE email = ? AND status = ?;

-- Good: Efficient JOIN on indexed columns
SELECT u.name, COUNT(o.id) as order_count
FROM users u
LEFT JOIN orders o ON u.id = o.user_id
GROUP BY u.id, u.name;

-- Avoid: SELECT *, functions in WHERE, high OFFSETs
```

### Performance Optimization
- **Use EXPLAIN**: Analyze query execution plans (syntax varies by database)
- **Index foreign keys**: Always index JOIN columns
- **Limit results**: Use LIMIT for pagination
- **Cursor pagination**: For large datasets (WHERE id > last_id)
- **Avoid N+1 queries**: Use JOINs or batch loading
- **Database-specific**: See platform-specific optimization rules

## Security Fundamentals

### Access Control
```sql
-- Create specific users with minimal privileges
CREATE USER app_user WITH PASSWORD 'strong_password';
GRANT SELECT, INSERT, UPDATE ON users TO app_user;

-- Role-based access
CREATE ROLE app_read;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;
GRANT app_read TO readonly_user;
```

### Data Protection
```sql
-- Input validation and constraints
CREATE TABLE users (
  email VARCHAR(255) CHECK (email LIKE '%@%.%'),
  age INTEGER CHECK (age BETWEEN 0 AND 150)
);

-- Parameterized queries (prevent SQL injection)
-- Application code:
cursor.execute("SELECT * FROM users WHERE email = %s", (email,))

-- Data masking for non-production
CREATE VIEW users_masked AS
SELECT id, CONCAT(LEFT(email, 3), '***') as email FROM users;
```

### Audit and Monitoring
```sql
-- Basic audit table
CREATE TABLE audit_log (
  id SERIAL PRIMARY KEY,
  table_name VARCHAR(100),
  operation VARCHAR(20),
  user_name VARCHAR(100),
  timestamp TIMESTAMP DEFAULT NOW(),
  record_data JSONB
);

-- Monitor suspicious activity
SELECT user_name, COUNT(*) FROM audit_log
WHERE operation = 'DELETE' AND timestamp > NOW() - INTERVAL '1 hour'
GROUP BY user_name;
```

## Common Patterns

### Timestamping
```sql
-- Standard timestamp columns
CREATE TABLE base_entity (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);
```

### Soft Deletes
```sql
-- Mark as deleted instead of removing
ALTER TABLE users ADD COLUMN deleted_at TIMESTAMP NULL;

-- Query active records
SELECT * FROM users WHERE deleted_at IS NULL;
```

### Relationships
```sql
-- One-to-many
CREATE TABLE orders (user_id INTEGER REFERENCES users(id));

-- Many-to-many
CREATE TABLE user_roles (
  user_id INTEGER REFERENCES users(id),
  role_id INTEGER REFERENCES roles(id),
  PRIMARY KEY (user_id, role_id)
);
```

## Universal Best Practices

### Schema Design
- **Normalize to 3NF minimum**: Eliminate redundancy
- **Use foreign keys**: Maintain referential integrity
- **Add constraints**: Enforce business rules at database level
- **Plan for growth**: Consider future schema evolution

### Performance
- **Index strategy**: Foreign keys + frequent WHERE/ORDER BY columns
- **Query analysis**: Regular EXPLAIN plan reviews
- **Avoid anti-patterns**: SELECT *, functions in WHERE, high OFFSETs
- **Monitor metrics**: Execution time, resource usage, cache hits

### Security
- **Least privilege**: Grant minimum required permissions
- **Parameterized queries**: Prevent SQL injection
- **Input validation**: Validate at database and application level
- **Audit logging**: Track sensitive operations
- **Data encryption**: Protect sensitive data at rest and in transit

### Maintenance
- **Regular backups**: Automated, tested backup strategy
- **Monitor performance**: Query performance, index usage
- **Update statistics**: Keep query planner statistics current
- **Schema migrations**: Version controlled, reversible changes

These fundamentals apply to all database systems - adapt syntax and leverage specific features using the database-specific rules:

- **PostgreSQL**: Advanced features, IDENTITY columns, RLS → [postgresql.mdc](mdc:.cursor/rules/database/postgresql.mdc)
- **MySQL**: InnoDB optimizations, character sets → [mysql.mdc](mdc:.cursor/rules/database/mysql.mdc)
- **Supabase**: Real-time, auth, RLS policies → [supabase.mdc](mdc:.cursor/rules/database/supabase.mdc)

Maintain these core principles while leveraging platform-specific capabilities.